/*
 *  Copyright 2015 Adobe Systems Incorporated
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.sample.core.servlets;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.commons.json.JSONArray;
import org.apache.sling.commons.json.JSONException;
import org.apache.sling.commons.json.JSONObject;
import org.apache.sling.engine.SlingRequestProcessor;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.day.cq.contentsync.handler.util.RequestResponseFactory;
import com.day.cq.wcm.api.Page;
import com.day.cq.wcm.api.PageManager;
import com.day.cq.wcm.api.WCMMode;

/**
 * Servlet that writes some sample content into the response. It is mounted for
 * all resources of a specific Sling resource type. The
 * {@link SlingSafeMethodsServlet} shall be used for HTTP methods that are
 * idempotent. For write operations use the {@link SlingAllMethodsServlet}.
 */
@Component(service=Servlet.class,
	property = {
	        "sling.servlet.selectors=" + "modifiedsearchresults",
	        "sling.servlet.resourceTypes=cq/Page",
	        "sling.servlet.extensions=json",
	        "sling.servlet.methods=GET"
	    })
public class SimpleServlet extends SlingSafeMethodsServlet {
	
	Logger logger = LoggerFactory.getLogger(getClass());
	
	@Reference
	private RequestResponseFactory requestResponseFactory;
	
	@Reference
	private SlingRequestProcessor requestProcessor;

    @SuppressWarnings("deprecation")
	@Override
    protected void doGet(final SlingHttpServletRequest req,
            final SlingHttpServletResponse resp) throws ServletException, IOException {
		try {
			String resultsOffset = "0";
			if(null != req.getParameter("resultsOffset")) {
				resultsOffset = req.getParameter("resultsOffset");
			}
			String fulltext = req.getParameter("fulltext");
			String requestTag = req.getParameter("tag");
			String modifiedURL = constructUrl(req, resp);
			JSONArray modifiedJSONArr = new JSONArray();
			String facetResultOffset = "0";
			while(modifiedJSONArr.length() < Integer.parseInt(resultsOffset)+10) {
				String resultFacet = getResultFacet(req, resp, facetResultOffset, modifiedURL,fulltext);
				JSONArray outputJSONArr = new JSONArray(resultFacet);
				if(outputJSONArr.length() == 0) {
					break;
				}
				for(int i=0; i < outputJSONArr.length(); i++) {
					JSONObject jsonObject = outputJSONArr.getJSONObject(i);
					if(modifiedJSONArr.length() <= Integer.parseInt(resultsOffset)+10) {
						if(null != requestTag) {
							if(isIncluded(req, jsonObject, requestTag)) {
								modifiedJSONArr.put(jsonObject);							
							}							
						}
						else {
							modifiedJSONArr.put(jsonObject);							
						}
					}
					else {
						break;
					}
					}
				facetResultOffset = String.valueOf(Integer.parseInt(facetResultOffset) + 10);
			}		
			resp.getWriter().print(modifiedJSONArr.toString());
		}
		catch(Exception e) {
			logger.error(e.getMessage());
		}
    }
    
    @SuppressWarnings("deprecation")
	private Boolean isIncluded(final SlingHttpServletRequest req, JSONObject jsonObject, String requestTag) {
    	Boolean isIncluded = false;
    	try {
			String path = jsonObject.getString("path");
			if(null != path){
				ResourceResolver resourceResolver = req.getResourceResolver();
				PageManager pm = resourceResolver.adaptTo(PageManager.class);
				Page page = pm.getContainingPage(path);
				String[] tagsArr = page.getProperties().get("cq:tags", new String[] {});
				jsonObject.put("cq:tags", String.join(path, tagsArr));				
				for(String tagStr:tagsArr) {
					if(tagStr.equalsIgnoreCase(requestTag)) {
						isIncluded = true;
						break;
					}
				}
			}
		} catch (JSONException e) {
			logger.error(e.getMessage());
		}
    	return isIncluded;
    }
    
    private String constructUrl(final SlingHttpServletRequest req,
            final SlingHttpServletResponse resp) {
    	String modifiedURL = "";
    	modifiedURL = req.getRequestURI().replace("modifiedsearchresults", "searchresults");
    	return modifiedURL;
    }
    
    private String getResultFacet(final SlingHttpServletRequest req,
            final SlingHttpServletResponse resp, String resultsOffset, String modifiedURL, String fulltext) {
    	try {
        	Map<String, Object> params = new HashMap<>();   
        	params.put("fulltext", fulltext);
        	params.put("resultsOffset", resultsOffset);
        	HttpServletRequest createdRequest = requestResponseFactory.createRequest("GET", modifiedURL,params);
        	WCMMode.DISABLED.toRequest(createdRequest);
        	ByteArrayOutputStream out = new ByteArrayOutputStream();
        	HttpServletResponse createdResponse = requestResponseFactory.createResponse(out);
        	requestProcessor.processRequest(createdRequest, createdResponse, req.getResourceResolver());
        	logger.info(out.toString());   
        	return out.toString();
    	}
    	catch(Exception e) {
    		logger.error(e.getMessage());
    	}
    	return "[]";
    }
}
